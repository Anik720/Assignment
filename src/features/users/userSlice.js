import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchUsers } from "./userApi";

const initialState = null;

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(userAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const userAsync = createAsyncThunk("user/fetchUsers", async (value) => {
  const response = await fetchUsers();
  // console.log(response);
  // alert("hello");
  // The value we return becomes the `fulfilled` action payload
  let filteredUser = [];
  if (value.value === "Admin") {
    filteredUser = response?.readEmployeeData?.filter((item) => {
      // console.log(item?.employeeType);
      if (item?.employeeType === "Admin") {
        return item;
      }
    });
  }
  if (value.value === "Employee") {
    filteredUser = response?.readEmployeeData?.filter((item) => {
      // console.log(item?.employeeType);
      if (item?.employeeType === "Employee") {
        return item;
      }
    });
  }
  return filteredUser;
});

export const usersSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  //   extraReducers: (builder) => {
  //     builder
  //       .addCase(userAsync.pending, (state) => {
  //         state.status = "loading";
  //       })
  //       .addCase(userAsync.fulfilled, (state, action) => {
  //         state.status = "idle";
  //         state.value += action.payload;
  //       });
  //   },
  extraReducers: {
    [userAsync.fulfilled]: (state, action) => action.payload,
  },
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default usersSlice.reducer;
